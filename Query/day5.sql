SELECT * FROM EMPLOYEES;

-- CASE WHEN STATEMENT TO CONDITIONALLY DISPLAY VALUES

-- DISPLAY EMPLOYEES FIRST_NAME, SALARY, SALARY_GRADE
    --- SALARY_GRADE COLUMN SHOULD BE BELOW VALUES
        -- WHEN SALARY > 8000 --> "ABOVE AVERAGE"
        -- ELSE "BELOW AVERAGE"

SELECT FIRST_NAME, SALARY,
       CASE WHEN SALARY > 8000 THEN 'ABOVE AVERAGE'
       ELSE 'BELOW AVERAGE'
            END AS SALARY_GRADE
FROM EMPLOYEES
;
-- DISPLAY EMPLOYEES FIRST_NAME, SALARY, SALARY_GRADE
--- SALARY_GRADE COLUMN SHOULD BE BELOW VALUES
-- WHEN SALARY > 20000 THEN "A"
-- WHEN SALARY BETWEEN 10000 - 20000 THEN "B"
-- WHEN SALARY BETWEEN 5000 - 9999 THEN "C"
-- ELSE < 5000 "D"

SELECT FIRST_NAME, SALARY,

       CASE WHEN SALARY > 20000 THEN 'A'
            WHEN SALARY BETWEEN 10000 AND 20000 THEN 'B'
            WHEN SALARY BETWEEN 5000 AND 10000 THEN 'C'
            ELSE 'D'
            END AS SALARY_GRADE2
FROM EMPLOYEES
ORDER BY SALARY DESC

;

--- DATE FUNCTION
-- FIND OUT EVERY EMPLOYEES HIRED BEFORE DATA 2002-08-16

-- TO_DATE ACCEPT 2 PARAMETERS
-- THE DATE STRING
-- THE FORMAT OF DATE PROVIDED IN PREVIOUS PARAMETER

SELECT FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
-- WONT WORK (WHERE HIRE_DATE < 2002-08-16)
WHERE HIRE_DATE < TO_DATE('2002-08-16', 'YYYY-MM-DD')
;

-- FIND OUT EVERY EMPLOYEES HIRED BETWEEN 2001-01-13 AND 2006-01-03

SELECT FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN TO_DATE('2001-01-13', 'YYYY-MM-DD')
    AND TO_DATE('2006-01-03', 'YYYY-MM-DD')
ORDER BY HIRE_DATE DESC ;


-- SUB QUERY : QUERY INSIDE ANOTHER QUERY
                -- LIKE A STATEMENT INSIDE ANOTHER STATEMENT

-- FIND OUT MAX SALARY FROM EMPLOYEES
SELECT MAX(SALARY)
FROM EMPLOYEES;


SELECT FIRST_NAME
FROM EMPLOYEES
WHERE SALARY = 24000;



SELECT FIRST_NAME
FROM EMPLOYEES
WHERE SALARY =  (SELECT MAX(SALARY)
                    FROM EMPLOYEES) ;

-- FIND OUT THE NAME OF THE EMPLOYEE THAT MAKE LEAST SALARY

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY = (SELECT MIN(SALARY)
                FROM EMPLOYEES);

-- FIND OUT THE NAME OF THE EMPLOYEE THAT MAKE MORE THAN AVERAGE SALARY

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY > (SELECT ROUND(AVG(SALARY)) FROM EMPLOYEES)
ORDER BY SALARY DESC;

-- DISPLAY ALL EMPLOYEES IF SALARY IS NOT 24000
-- AND FIND MAX
-- AKA SECOND MAX SALARY

SELECT MAX(SALARY)
FROM EMPLOYEES
WHERE SALARY != (SELECT MAX(SALARY) FROM EMPLOYEES)
;

-- 3RD MAX SALARY

SELECT MAX(SALARY)
FROM EMPLOYEES
WHERE SALARY < 17000 ; -- FILTER ALL SALARY LESS THAN 2ND MAX
--- JUST REPLACE THE 17000 WITH ABOVE QUERY

SELECT MAX(SALARY)
FROM EMPLOYEES
WHERE SALARY  < ( SELECT MAX(SALARY)
                  FROM EMPLOYEES
                  WHERE SALARY != (SELECT MAX(SALARY) FROM EMPLOYEES))
;

-- FIND OUT THE FIRST_NAME OF EMPLOYEES WHO WORKS IN EXECUTIVE DEPARTMENT
-- Find out the department_id of Executive

SELECT DEPARTMENT_ID FROM DEPARTMENTS
WHERE DEPARTMENT_NAME = 'Executive';

SELECT FIRST_NAME FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

-- NOW COMBINE THEM

SELECT FIRST_NAME FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM DEPARTMENTS
                       WHERE DEPARTMENT_NAME = 'Executive');

-- YOU CAN ALSO USE INNER JOIN
--SELECT E.FIRST_NAME, D.DEPARTMENT_NAME
--FROM EMPLOYEES E
--INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
--WHERE DEPARTMENT_NAME = 'Executive';


-- FIND OUT THE DEPARTMENT_ID OF EXECUTIVE AND Administration DEPARTMENT

SELECT DEPARTMENT_ID FROM DEPARTMENTS
WHERE DEPARTMENT_NAME IN ('Executive', 'Administration');

-- FIND OUT THE FIRST_NAME OF EMPLOYEES
-- WHO WORKS IN EXECUTIVE DEPARTMENT AND Administration DEPARTMENT
-- YOU NEED TO US "IN" BECAUSE IT HAS MORE THAN 1 VALUE

SELECT FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (10,90);

-- NOW COMBINE
SELECT FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS
                       WHERE DEPARTMENT_NAME IN ('Executive', 'Administration'));

-- RESULT OF SUB QUERY CAN ALSO BE USED AS ENTIRE TABLE
-- FOR EXAMPLE SELECT * FROM (SUBQUERY GOES HERE)

SELECT FIRST_NAME, LAST_NAME, FIRST_NAME || ', '|| LAST_NAME AS FULL_NAME
FROM EMPLOYEES
--WHERE FULL_NAME = ' EllenAbel' WE CAN NOT USE ALIAS IN CONDITION
;

    -- SUB QUERY AS A RESULT OF A WHOLE TABLE
    SELECT *
    FROM    (SELECT FIRST_NAME,  FIRST_NAME || ', '|| LAST_NAME AS FULL_NAME
        FROM EMPLOYEES)
    WHERE FULL_NAME = 'Ellen, Abel';

-- FIND OUT THE EMPLOYEE COUNT OF THE DEPARTMENT WITH MOST EMPLOYEE
SELECT MAX(EMPLOYEE_COUNT)
       FROM ( SELECT DEPARTMENT_ID, COUNT(*) AS EMPLOYEE_COUNT
              FROM EMPLOYEES
              GROUP BY DEPARTMENT_ID);

---- DENSE_RANK FUNCTION THAT FALL INTO CATEGORY OF ANALYTICAL FUNCTIONS
-- DENSE_RANK() OVER (ORDER BY SALARY DESC)
-- IT MEANS GENERATE RANK NUMBER FOR SALARY
-- USING SALARY DESCENDING ORDER
-- max salary get 1 , second max get 2 , third max get 3 .....
SELECT FIRST_NAME, SALARY ,
       DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK
       --, RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK
FROM EMPLOYEES
;


-- NOW WE CAN SEE THIS WHOLE RESULT OF ABOVE QUERY AS A TABLE
-- SELECT FROM THIS "TABLE" AND FILTER THE RESULT
-- BY SALARY_RANK = NTH(the number you want)
SELECT * FROM (    SELECT FIRST_NAME, SALARY,
                          DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK
                   FROM EMPLOYEES)
WHERE SALARY_RANK = 2;


CREATE TABLE EMP_SALARY_RANK AS (

    SELECT FIRST_NAME, SALARY ,
           DENSE_RANK() OVER (ORDER BY SALARY DESC) AS SALARY_RANK
    FROM EMPLOYEES

) ;

SELECT *
FROM EMP_SALARY_RANK
WHERE SALARY_RANK = 4;
----  100 , 34, 88 , 90 , 55 , 100
----   5     1   3    4   2  ,  5




