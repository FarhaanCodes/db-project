-- DISPLAY all First_name THAT HAS LETTER A IN SECOND CHARACTER

SELECT FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_a%';

-- FROM DEPARTMENT TABLE
-- DISPLAY UNIQUE LOCATION_ID

SELECT DISTINCT LOCATION_ID
FROM DEPARTMENTS ;

-- FROM LOCATIONS TABLE
-- COUNT HOW MANY LOCATIONS WE HAVE

SELECT COUNT(*) FROM LOCATIONS;

-- DISPLAY ALL DEPARTMENTS WITH DEPARTMENT_NAME CONTAINS IT

SELECT * FROM DEPARTMENTS
WHERE DEPARTMENT_NAME LIKE '%IT %' ;

-- DISPLAY THE EMPLOYEE COUNT FOR EACH FIRST_NAME
-- FILTER THE GROUPED RESULT TO ONLY DISPLAY IF THE COUNT IS MORE THAN 1

SELECT FIRST_NAME , COUNT(*)
FROM EMPLOYEES
GROUP BY FIRST_NAME
HAVING COUNT(*) > 1;


SELECT EMPLOYEES.FIRST_NAME
FROM EMPLOYEES;

SELECT bla.FIRST_NAME
From EMPLOYEES bla;


-------- SQL JOIN --------
--- IS USED TO GET DATA FROM 2 OR MORE TABLES THAT RELATED TO EACH OTHER
-- PRIMARY KEY AND FOREIGN KEY RELATIONSHIP

-- INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN

-- IN ORDER TO JOIN TWO TABLES THAT HAS RELATIONSHIP
-- SELECT DESIRED COLUMNS FROM BOTH TABLES
-- FROM TABLE 1
-- INNER JOIN TABLE 2 ON THE COMMON COLUMN


SELECT COUNTRIES.COUNTRY_NAME, REGIONS.REGION_NAME
FROM COUNTRIES
INNER JOIN REGIONS ON COUNTRIES.REGION_ID = REGIONS.REGION_ID;

-- WE CAN USE ALIAS FOR TABLE TO MAKE ABOVE QUERY SLIGHTLY MORE READABLE
-- NICKNAMES ARE FOLLOWED BY SPACE AND LETTER OR WORD
-- YOU CAN USE NICKNAME TO SELECT COLUMNS
-- JUST LIKE YOU DID IN JAVA obj.VariableName


SELECT c.COUNTRY_NAME, r.REGION_NAME
FROM COUNTRIES c
INNER JOIN REGIONS r ON c.REGION_ID = r.REGION_ID
;

-- FIND OUT CITY (LOCATIONS) AND COUNTRY_NAME (COUNTRIES)

SELECT LOCATIONS.COUNTRY_ID, COUNTRIES.COUNTRY_NAME
FROM LOCATIONS
INNER JOIN COUNTRIES ON LOCATIONS.COUNTRY_ID = COUNTRIES.COUNTRY_ID;

-- OR

SELECT l.COUNTRY_ID, c.COUNTRY_NAME
FROM LOCATIONS l
INNER JOIN COUNTRIES c ON l.COUNTRY_ID = c.COUNTRY_ID;

-- DISPLAY DEPARTMENT_NAME (DEPARTMENTS) AND CITY(LOCATIONS)

SELECT d.DEPARTMENT_NAME, l.CITY
FROM DEPARTMENTS d
INNER JOIN LOCATIONS l on d.LOCATION_ID = l.LOCATION_ID
;


-- DISPLAY FIRST_NAME (EMPLOYEES), DEPARTMENT_NAME (DEPARTMENTS)
-- THEY ARE RELATED BY DEPARTMENT_ID

SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
;

--- INNER JOIN WILL RETURN THE DATA THAT MATCH FROM BOTH TABLE
--- IT'S RETURNING ONLY ROWS THAT HAS MATCHING DEPARTMENT_ID FROM BOTH TABLE
--- ANYTHING ELSE IS EXCLUDED
--- FOR EXAMPLE: KIMBERLY HAS NO DEPARTMENT ID
---              DEPARTMENTS WITH NO EMPLOYEES (MEANING NONE OF THE EMPLOYEES HAS DEPARTMENT ID)

-- WE WANT TO DISPLAY FIRST_NAME, DEPARTMENT_NAME
--- INCLUDING THOSE THAT DOES NOT HAVE MATCHING DEPARTMENT_ID
 --- LIKE KIMBERLY HAS NULL DEPARTMENT ID BUT WE STILL WANT TO GET THAT DATA

SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
LEFT OUTER JOIN  DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
;

--- -- WE WANT TO DISPLAY FIRST_NAME, DEPARTMENT_NAME
--- INCLUDING THOSE DEPARTMENTS THAT DOES NOT HAVE ANY MATCHING EMPLOYEES

SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
RIGHT OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
;

--- -- WE WANT TO DISPLAY FIRST_NAME, DEPARTMENT_NAME
--- INCLUDING THOSE THAT DOES NOT HAVE MATCHING DEPARTMENT_ID
--- INCLUDING THOSE DEPARTMENTS THAT DOES NOT HAVE ANY MATCHING EMPLOYEES

SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEES e
FULL OUTER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
;


--- FACT : ALL DEPARTMENTS ARE LOCATED IN 7 DISTINCT CITY
--- FACT : THERE ARE 27 CITY IN LOCATIONS TABLE MEANING 16 OF THEM HAS NO DEPARTMENTS
---  DISPLAY ALL DEPARTMENT_NAME (DEPARTMENTS) AND CITY(LOCATIONS)
--- INCLUDING THOSE CITY WITH NO DEPARTMENT IN IT
-- 43

SELECT d.DEPARTMENT_NAME , l.CITY
FROM DEPARTMENTS d
RIGHT OUTER JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID;


--- DISPLAY FIRST_NAME AND JOB_TITLE

SELECT e.FIRST_NAME , j.JOB_TITLE
FROM EMPLOYEES e
RIGHT OUTER JOIN JOBS j ON e.JOB_ID = j.JOB_ID


--- DISPLAY FIRST_NAME(EMPLOYEES)
--      AND JOB_TITLE(JOBS)
--      AND DEPARTMENT_NAME(DEPARTMENTS)
SELECT e.FIRST_NAME, j.JOB_TITLE, d.DEPARTMENT_NAME
FROM EMPLOYEES e
INNER JOIN JOBS j on e.JOB_ID = j.JOB_ID
INNER JOIN DEPARTMENTS d on e.DEPARTMENT_ID = D.DEPARTMENT_ID

--- THIS IS THE NO ALIAS VERSION OF SAME QUERY
SELECT  EMPLOYEES.FIRST_NAME,
        JOBS.JOB_TITLE,
        DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
         INNER JOIN JOBS        ON EMPLOYEES.JOB_ID = JOBS.JOB_ID
         INNER JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID ;

---- DISPLAY CITY(LOCATIONS) , COUNTRY_NAME(COUNTRIES), REGION_NAME(REGIONS)
SELECT L.CITY, C.COUNTRY_NAME, R.REGION_NAME
FROM LOCATIONS L
INNER JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID
INNER JOIN REGIONS R ON C.REGION_ID = R.REGION_ID;

----- SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
SELECT d.DEPARTMENT_NAME, COUNT(e.FIRST_NAME) AS "COUNT_EMPLOYYES_IN_DEPARTMENT"
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_NAME
;